import logging
import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import logging.handlers
from aiogram.utils import executor
import keyboards
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import asyncio

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ.
logger = logging.getLogger(__name__)

# C–æ–∑–¥–∞—ë—Ç –≤—Å–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –∫–∞—Ç–∞–ª–æ–≥–∏, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç.
logging.basicConfig(  # –ß—Ç–æ–±—ã –±–æ—Ç —Ä–∞–±–æ—Ç–∞–ª —É—Å–ø–µ—à–Ω–æ, —Å–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ñ–∏–≥ —Å –±–∞–∑–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –±–æ—Ç–∞
    level=logging.INFO,
    format="[%(levelname)-8s %(asctime)s at           %(funcName)s]: %(message)s",
    datefmt="%d.%d.%Y %H:%M:%S",
    handlers=[logging.handlers.RotatingFileHandler("Logs/     TGBot.log", maxBytes=10485760, backupCount=0), logging.StreamHandler()])

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot('5366109022:AAH_PzE6TcAUse11roxNQvgPmLgbFKLm2Us')
dp = Dispatcher(bot, storage=MemoryStorage())
logging.basicConfig(level=logging.INFO)
dp.middleware.setup(LoggingMiddleware())

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite3
conn = sqlite3.connect('predloshka.db') 
cursor = conn.cursor()

cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INT,
        can_post BOOL
    )
''')

cursor.execute('''
    CREATE TABLE IF NOT EXISTS channels (
        channel_id INT,
        channel_name TEXT,
        referrer_link TEXT,
        admin_id INT
    )
''')
conn.commit()

admins = []

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, —á—Ç–æ —é–∑–µ—Ä - –∞–¥–º–∏–Ω –∫–∞–Ω–∞–ª–∞.
async def channel_admin_check(message: types.Message):
        member = await bot.get_chat_member(message.chat.id, message.from_user.id)
        return member.is_chat_admin()

# –°–æ–∑–¥–∞—ë–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
class UserState(StatesGroup):
    write_post = State()
    write_nameUrl_for_post = State()
    write_url_for_post = State()
    write_channel_name = State()
    write_channel_id = State()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'], state="*")
async def start(message: types.Message, state: FSMContext):
    user_id = message.from_user.id

    if len(message.text) > 7: # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—à—ë–ª –ø–æ —Ä–µ—Ñ.—Å—Å—ã–ª–∫–µ
        await state.finish()
        channel_id = message.text[7:]
        channel_name = cursor.execute(f"SELECT channel_name FROM channels WHERE channel_id={channel_id}").fetchone()[0]
        
        if int(channel_id) in cursor.execute(f"SELECT channel_id FROM channels").fetchall()[0]:
            if cursor.execute(f"SELECT can_post FROM users WHERE user_id={user_id}").fetchone()[0] == True: # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –∏–¥–µ—é
                await state.update_data(channel_id=channel_id)
                await state.update_data(channel_name=channel_name)
                await message.answer(f'–ù–∞–ø–∏—à–∏ –ø–æ—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —Ö–æ—Ç–µ–ª –±—ã –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ –∫–∞–Ω–∞–ª–µ "{channel_name}"')
                await UserState.write_post.set()
            else: # –ï—Å–ª–∏ –æ–Ω —É–∂–µ –ø—Ä–µ–¥–ª–∞–≥–∞–ª —Å–µ–≥–æ–¥–Ω—è –∏–¥–µ—é
                await message.answer(f'–¢—ã –º–æ–∂–µ—à—å –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø–æ—Å—Ç –≤ –¥–µ–Ω—å –¥–ª—è –∫–∞–Ω–∞–ª–∞ "{channel_name}"‚ùóÔ∏è')
        else:
            await message.answer("–¢—ã –ø–µ—Ä–µ—à—ë–ª –ø–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ ‚ùóÔ∏è")
    else:
        if user_id not in admins:
            if cursor.execute(f"SELECT user_id FROM users WHERE user_id='{message.from_user.id}'").fetchone() is None:
                cursor.execute(f"INSERT INTO users ('user_id', 'can_post') VALUES(?, ?)", (message.from_user.id, True))
                conn.commit()

            keyboards.post_url_keyboard = InlineKeyboardMarkup(row_width=1)
            keyboards.post_url_keyboard.add(*[InlineKeyboardButton(
                text="–î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –∫ –ø–æ—Å—Ç—É",
                callback_data="write_post__add_button"),
                InlineKeyboardButton(
                text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é", 
                callback_data="send_to_moderation")])
            await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞!", reply_markup=keyboards.user_keyboard)
        else:
            keyboard = InlineKeyboardMarkup()
            keyboard.add(InlineKeyboardButton(text="–ê–¥–º–∏–Ω –º–µ–Ω—é", callback_data="admin_menu"))
            await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞!", reply_markup=keyboards.keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /admin
@dp.message_handler(commands=['admin'])
async def admin_menu(message: types.Message):
    # –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–æ–º—É –º–µ–Ω—é
    if message.from_user.id in admins:  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –≤–∞—à–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await message.answer("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–æ–µ –º–µ–Ω—é:", reply_markup=keyboards.admin_keyboard)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–æ–º—É –º–µ–Ω—é.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞
@dp.message_handler(state=UserState.write_post, content_types=types.ContentType.ANY)
async def get_post(message: Message, state: FSMContext):
    data = await state.get_data()
    print(3)
    if message.video:
        if "videos" not in data:
            videos = [message.media_group_id, message.video]
            await state.update_data(videos=videos)
        else:
            data = await state.get_data()
            videos = data["videos"]
            if videos[0] == message.media_group_id:
                videos.append(message.video)
                await state.update_data(videos=videos)

    elif message.photo:
        if "photos" not in data:
            photos = [message.media_group_id, message.photo[-1]]
            await state.update_data(photos=photos)
        else:
            data = await state.get_data()
            photos = data["photos"]
            if photos[0] == message.media_group_id:
                photos.append(message.photo[-1])
                await state.update_data(photos=photos)
                
    if "post_text" not in data:
        await state.update_data(post_text=message.text)
        await message.answer("–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫–∏ –∫ —Å–≤–æ–µ–º—É –ø–æ—Å—Ç—É –∏–ª–∏ —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é")

    if "post_text" not in data and (message.photo or message.video): # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –ø–æ—Å—Ç —Å —Ñ–æ—Ç–∫–æ–π
        await state.update_data(post_text=message.caption)
        await message.answer("–ó–∞–≥—Ä—É–∂–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é... üîÑ")
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        data = await state.get_data()

        await asyncio.sleep(1)
        if "post_text" not in data:
            await state.update_data(post_text=message.text)
        data = await state.get_data()

        if "media_flag" not in data:
            await state.update_data(media_flag=False)
            if message.photo:
                media = types.MediaGroup()
                photos = data["photos"]
                # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Ö
                photos = photos[1:]
                print(photos)
                for photo in photos:
                    media.attach_photo(photo.file_id)

                if message.video:
                    videos = data["videos"]
                    videos = videos[1:]
                    for video in videos:
                        if video == videos[-1]:
                            if len(videos) > 1:
                                await message.answer_media_group(media=media)
                            await bot.send_video(message.from_user.id, video=message.video.file_id, caption=data["post_text"], reply_markup=keyboards.post_url_keyboard)   
                        else:
                            media.attach_video(video.file_id)
                else:
                    print(2)
                    if len(photos) > 1:
                        await message.answer_media_group(media=media)
                    await bot.send_photo(message.from_user.id, photo=photo.file_id, caption=data["post_text"], reply_markup=keyboards.post_url_keyboard)

            elif message.video:
                media = types.MediaGroup()
                data = await state.get_data()
                videos = data["videos"]
                videos = videos[1:]
                for video in videos:
                    if video == videos[-1]:
                        if len(videos) > 1:
                            await message.answer_media_group(media=media)
                        await bot.send_video(message.from_user.id, video=message.video.file_id, caption=data["post_text"], reply_markup=keyboards.post_url_keyboard)   
                    else:
                        media.attach_video(video.file_id)
                    
    if not message.video and not message.photo:
        await message.answer(message.text, reply_markup=keyboards.post_url_keyboard)

    await state.reset_state(with_data=False)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –∏–º–µ–Ω–∏ —Å—Å—ã–ª–∫–∏
@dp.message_handler(state=UserState.write_nameUrl_for_post)
async def get_nameUrl_for_post(message: Message, state: FSMContext):
    await state.update_data(url_name=message.text)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ‚úÖ \n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–∞–º—É —Å—Å—ã–ª–∫—É")
    await UserState.write_url_for_post.set()
    

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫ –∫ –ø–æ—Å—Ç—É
@dp.message_handler(state=UserState.write_url_for_post)
async def get_url_for_post(message: Message, state: FSMContext):
    data = await state.get_data()
    try:
        keyboards.post_url_keyboard.add(InlineKeyboardButton(
            text=data["url_name"],
            url=message.text))
        await message.answer("–°—Å—ã–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ ‚úÖ \n–¢—ã –±—ã —Ö–æ—Ç–µ–ª –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë?")

        if "photos" in data: # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –ø–æ—Å—Ç —Å —Ñ–æ—Ç–∫–æ–π
            media = types.MediaGroup()
            data["photos"] = data["photos"][1:]
            for photo in data["photos"]:
                if photo == data["photos"][-1]:
                    if len(data["photos"]) > 1:
                        await message.answer_media_group(media=media)
                    await bot.send_photo(message.from_user.id, photo=photo.file_id, caption=data["post_text"], reply_markup=keyboards.post_url_keyboard)
                else:
                    media.attach_photo(photo.file_id)
    except:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ ‚ùóÔ∏è")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –∫–∞–Ω–∞–ª–∞
@dp.message_handler(state=UserState.write_channel_name)
async def get_channel_name(message: Message, state: FSMContext):
    await state.update_data(channel_name=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å —Ç–µ–±–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å id —Å–≤–æ–µ–≥–æ –∫–∞–Ω–∞–ª–∞")
    await UserState.write_channel_id.set()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è id –∫–∞–Ω–∞–ª–∞
@dp.message_handler(state=UserState.write_channel_id)
async def get_channel_id(message: Message, state: FSMContext):
    await state.update_data(channel_id=message.text)
    data = await state.get_data()
    refferer_link = "https://t.me/teeeeeeestttttttttiinnngBot?start=" + message.text
    cursor.execute(f"INSERT INTO channels ('channel_id', 'channel_name', 'referrer_link', 'admin_id') VALUES(?, ?, ?, ?)", (data["channel_id"], data["channel_name"], refferer_link, message.from_user.id))
    conn.commit()
    await message.answer(f"–û—Ç–ª–∏—á–Ω–æ ‚úÖ –¢–µ–ø–µ—Ä—å, –µ—Å–ª–∏ —è –µ—Å—Ç—å –≤ —Ç–≤–æ—ë–º –∫–∞–Ω–∞–ª–µ, —Ç–æ –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å —Å–≤–æ–∏ –∏–¥–µ–∏ –¥–ª—è –ø–æ—Å—Ç–æ–≤. \n–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ —Ç–≤–æ–µ–≥–æ –∫–∞–Ω–∞–ª–∞ - {refferer_link}")
    await UserState.write_channel_id.set()


@dp.message_handler()
async def admin_menu_actions(message: types.Message):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–æ–≥–æ –º–µ–Ω—é
    if message.from_user.id in admins:  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –≤–∞—à–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if message.text == "–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏":
            # –ó–¥–µ—Å—å —Ä–µ–∞–ª–∏–∑—É–π—Ç–µ –ª–æ–≥–∏–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            await message.answer("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        elif message.text == "–£–¥–∞–ª–µ–Ω–∏–µ/–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è":
            # –ó–¥–µ—Å—å —Ä–µ–∞–ª–∏–∑—É–π—Ç–µ –ª–æ–≥–∏–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è/–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await message.answer("–í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å/–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å:")
        elif message.text == "–í—ã–¥–∞—á–∞ –±–∞–ª–∞–Ω—Å–∞":
            # –ó–¥–µ—Å—å —Ä–µ–∞–ª–∏–∑—É–π—Ç–µ –ª–æ–≥–∏–∫—É –¥–ª—è –≤—ã–¥–∞—á–∏ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await message.answer("–í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –≤—ã–¥–∞—Ç—å –±–∞–ª–∞–Ω—Å:")
        elif message.text == "–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞":
            # –ó–¥–µ—Å—å —Ä–µ–∞–ª–∏–∑—É–π—Ç–µ –ª–æ–≥–∏–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
            await message.answer("–ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.")
        elif message.text == "–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏":
            # –ó–¥–µ—Å—å —Ä–µ–∞–ª–∏–∑—É–π—Ç–µ –ª–æ–≥–∏–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
            await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")

    elif await channel_admin_check(message): # –ï—Å–ª–∏ —é–∑–µ—Ä - –∞–¥–º–∏–Ω –∫–∞–Ω–∞–ª–∞
        await message.answer("–¢—ã –∞–¥–º–∏–Ω –∫–∞–Ω–∞–ª–∞!")


# –ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É
@dp.callback_query_handler(state="*")
async def callback_worker(call: CallbackQuery, state: FSMContext):
    if call.data == "write_post__add_button":
        await call.message.answer("–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∫ –ø–æ—Å—Ç—É")
        await UserState.write_nameUrl_for_post.set()

    elif call.data == "add_channel":
        await call.message.edit_text("–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ –∫–∞–Ω–∞–ª–∞")
        await UserState.write_channel_name.set()

    elif call.data == "send_to_moderation":
        data = await state.get_data()
        admin_id = cursor.execute(f'SELECT admin_id FROM channels WHERE channel_id={data["channel_id"]}').fetchone()[0]
        await bot.send_message(admin_id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.username} –ø—Ä–∏—Å–ª–∞–ª –∏–¥–µ—é –ø–æ—Å—Ç–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {data['channel_name']}! \n–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞: \n{data['post_text']}")
        cursor.execute("UPDATE users SET can_post = ? WHERE user_id = ?",
                    (False, call.from_user.id))
        conn.commit()
        await call.message.delete()
        await call.message.answer("–ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é ‚úÖ \n–í–∞–º –ø—Ä–∏–¥—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø–æ—Å—Ç –±—É–¥–µ—Ç –æ–¥–æ–±—Ä–µ–Ω –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω—ë–Ω")
        await asyncio.sleep(86400) # –ñ–¥—ë–º –¥–µ–Ω—å –∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º —é–∑–µ—Ä—É —Å–Ω–æ–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ—Å—Ç—ã
        cursor.execute("UPDATE users SET can_post = ? WHERE user_id = ?",
            (True, call.from_user.id))
        conn.commit()
        await bot.send_message(call.from_user.id, f'–í—ã —Å–Ω–æ–≤–∞ –º–æ–∂–µ—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é –¥–ª—è –ø–æ—Å—Ç–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞ "{data["channel_name"]}"‚úÖ')
        await state.finish()


if __name__ == "__main__":  # –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∫ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã–π, –∞ –Ω–µ –∫–∞–∫ –º–æ–¥—É–ª—å
    # –í –∫–æ–Ω—Å–æ–ª–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–æ–∂—ë–Ω –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
    logger.info("–ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")
    executor.start_polling(  # –ë–æ—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å
        dispatcher=dp,  # –ü–µ—Ä–µ–¥–∞–µ–º –≤ —Ñ—É–Ω–∫—Ü–∏—é –¥–∏—Å–ø–µ—Ç—á–µ—Ä
        # (–¥–∏—Å–ø–µ—Ç—á–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Ç–æ, —á—Ç–æ–±—ã —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Ö–æ–¥–∏–ª–∏ –¥–æ –±–æ—Ç–∞)
        on_startup=logger.info("–ó–∞–≥—Ä—É–∑–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ!"), skip_updates=True)
    # –ï—Å–ª–∏ –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è, —Ç–æ –≤ –∫–æ–Ω—Å–æ–ª—å –≤—ã–≤–µ–¥–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ
